<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Página de Inicio</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
    }
    header {
      background-color: #333;
      color: white;
      padding: 10px 20px;
      text-align: center;
    }
    nav a {
      color: white;
      margin: 0 10px;
      text-decoration: none;
    }
    nav a:hover {
      text-decoration: underline;
    }
    main {
      padding: 20px;
      text-align: center;
    }
    form {
      max-width: 300px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 3px;
    }
    button {
      width: 100%;
      padding: 10px;
      background-color: #333;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }
    button:hover {
      background-color: #555;
    }
  </style>
<body>
<header>
  <h1>Bienvenido</h1>
  <nav>
    <% if (typeof user != 'undefined') { %>
      <h1>Hola <%= user %></h1>
      <button id="close-sesion">Cerrar sesión</button>
    <% } %>
  </nav>
</header>

<main>
  <% if (typeof user == 'undefined') { %>
    <p>Inicio de sesión</p>
    <div>
      <form id="login-form" action="/login" method="POST">
        <label for="username">Usuario:</label>
        <input type="text" id="username" name="username" required>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" required>

        <button type="submit">Iniciar Sesión</button>
      </form>

      <p>Registro</p>
      <div>
        <form id="register-form" action="/register" method="POST">
          <label for="username">Usuario:</label>
          <input type="text" id="username" name="username" required>

          <label for="password">Contraseña:</label>
          <input type="password" id="password" name="password" required>

          <button type="submit">Registrarse</button>
        </form>
      </div>
    </div>
  <% } %>
</main>

  <script>
    // Manejar el envío del formulario de inicio de sesión
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
      loginForm.addEventListener('submit', async (e) => {
        e.preventDefault(); // Evitar que el formulario se envíe de forma tradicional

        // Obtener los datos del formulario
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        try {
          // Enviar los datos al servidor usando fetch
          const response = await fetch('/users/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            // Si la respuesta es exitosa, redirigir al usuario
            window.location.href = '/users/protected';
          } else {
            // Manejar errores (por ejemplo, credenciales incorrectas)
            const errorData = await response.json();
            alert(errorData.error || 'Error al iniciar sesión');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Hubo un error al conectar con el servidor');
        }
      });
    }

    // Manejar el envío del formulario de registro
    const registerForm = document.getElementById('register-form');
    if (registerForm) {
      registerForm.addEventListener('submit', async (e) => {
        e.preventDefault(); // Evitar que el formulario se envíe de forma tradicional

        // Obtener los datos del formulario
        const formData = new FormData(registerForm);
        const data = Object.fromEntries(formData.entries());

        try {
          // Enviar los datos al servidor usando fetch
          const response = await fetch('/users/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            // Si la respuesta es exitosa, redirigir al usuario
            window.location.href = '/users/protected';
          } else {
            // Manejar errores (por ejemplo, usuario ya registrado)
            const errorData = await response.json();
            alert(errorData.error || 'Error al registrarse');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Hubo un error al conectar con el servidor');
        }
      });
    }

    // Manejar el cierre de sesión
    const closeSessionButton = document.getElementById('close-sesion');
    if (closeSessionButton) {
      closeSessionButton.addEventListener('click', async () => {
        try {
          const response = await fetch('/users/logout', {
            method: 'POST',
          });

          if (response.ok) {
            // Redirigir al usuario después de cerrar sesión
            window.location.href = '/';
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Hubo un error al cerrar sesión');
        }
      });
    }
  </script>
</body>
</html>
